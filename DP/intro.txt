

다이나믹 프로그래밍 

메모리 공간을 약간 더 상요하면 연산 속도를 비약적으로 증가시킬 수 있는 방법.

두가지 방식 

    1. 탑다운  => 큰문제를 해결하기 위해서 작은 문제를  호출한다고하여 탑다운  (재귀를 많이 쓰는)
    2. 보텀업  -> 작은 문제부터 차근차근 답을 도출한다 ( 반복문을 많이쓰는)


사용가능 조건 

    1. 큰 문제를 작은 문제로 나눌 수 있다  
    2. 작은 문제에서 구한 답은 그것을 포함하는 큰문제에서도 동일하다.


큰문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 



분할 정복과의 차이


큰문제를 작게 나누는 것은 동일하나, 
다이나믹 프로그래밍은  나눈 문제들이 큰문제들과 연관이 되어있는것
    (한번 해결한 것을 다시 해결한다)
분할적복은 서로 영향을 미치지 않는 것이다.
    (처리했던 문제를 다시 처리하는 상황이 생기지 않는다)




수열은 배열이나 리스트로 표현할 수있다  : 수열===  수의 배열 

메모이제이션은  값을 저장하기 위해( DP-table) 다양한 자료구조를 쓸 수 있다

리스트, 다차원 리스트, 딕셔너리 (수열처럼 연속적이지 않을때 유리함 ), 튜플 등등 ..  

